
# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Find the QtWidgets library
find_package(Qt5Widgets)

#check C++11 support
include(cxx11.cmake)
check_for_cxx11_compiler(CXX11_COMPILER)
# If a C++11 compiler is available, then set the appropriate flags
if(CXX11_COMPILER)
    enable_cxx11()
else(CXX11_COMPILER)
    MESSAGE(FATAL_ERROR "Can not enable C++11 support.")
endif(CXX11_COMPILER)

set(SRC_LIST main.cpp)
set(SRC_LIST ${SRC_LIST} mainwindow.cpp)
set(SRC_LIST ${SRC_LIST} kccodeeditor.cpp )
set(SRC_LIST ${SRC_LIST} kctexteditor.cpp )
set(SRC_LIST ${SRC_LIST} kcpanel.cpp )
set(SRC_LIST ${SRC_LIST} kclinenumpanel.cpp )
set(SRC_LIST ${SRC_LIST} kreogistcutestyle.cpp )
set(SRC_LIST ${SRC_LIST} kctitlebar.cpp )
set(SRC_LIST ${SRC_LIST} kcglobal.cpp )
set(SRC_LIST ${SRC_LIST} textcharformatmap.cpp )
set(SRC_LIST ${SRC_LIST} gcc.cpp )
set(SRC_LIST ${SRC_LIST} kctabmanager.cpp )
set(SRC_LIST ${SRC_LIST} kccompiledock.cpp )
set(SRC_LIST ${SRC_LIST} gdb.cpp )
set(SRC_LIST ${SRC_LIST} kcmainwindow.cpp )
set(SRC_LIST ${SRC_LIST} gdbmivalue.cpp )
set(SRC_LIST ${SRC_LIST} kcmarkpanel.cpp )
set(SRC_LIST ${SRC_LIST} kcstatusbar.cpp )
set(SRC_LIST ${SRC_LIST} kctextsearcher.cpp )
set(SRC_LIST ${SRC_LIST} kcsearchwindow.cpp )
set(SRC_LIST ${SRC_LIST} kcstatuscursorinfo.cpp )
set(SRC_LIST ${SRC_LIST} kccontrolcenter.cpp )
set(SRC_LIST ${SRC_LIST} kcexecutor.cpp )
set(SRC_LIST ${SRC_LIST} kcjudgedock.cpp )
set(SRC_LIST ${SRC_LIST} kclanguagemode.cpp )
set(SRC_LIST ${SRC_LIST} fpc.cpp )
set(SRC_LIST ${SRC_LIST} kclistbutton.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitemboolean.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitembase.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitemcombo.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitemlinetext.cpp )
set(SRC_LIST ${SRC_LIST} dbgoutputreceiver.cpp )
set(SRC_LIST ${SRC_LIST} kcplaintextbrowser.cpp )
set(SRC_LIST ${SRC_LIST} kcdragproxy.cpp )
set(SRC_LIST ${SRC_LIST} kctextblockdata.cpp )
set(SRC_LIST ${SRC_LIST} kchighlighter.cpp )
set(SRC_LIST ${SRC_LIST} kcsidebar.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitembrowsetext.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitemlanguageitem.cpp )
set(SRC_LIST ${SRC_LIST} kcgeneralconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kceditorconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kccompilerconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kcdebuggerconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kclanguageconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kcfileassociation.cpp )
set(SRC_LIST ${SRC_LIST} kcconfigure.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitemnuminput.cpp )
set(SRC_LIST ${SRC_LIST} kchistoryconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kcmessagebox.cpp )
set(SRC_LIST ${SRC_LIST} kcsearchlinetext.cpp )
set(SRC_LIST ${SRC_LIST} kcsearchwidget.cpp )
set(SRC_LIST ${SRC_LIST} kcstatusrewriteinfo.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettinglistitembutton.cpp )
set(SRC_LIST ${SRC_LIST} kcsplashscreen.cpp )
set(SRC_LIST ${SRC_LIST} kcclipboard.cpp )
set(SRC_LIST ${SRC_LIST} kccompilerbase.cpp )
set(SRC_LIST ${SRC_LIST} kccompileoutputreceiver.cpp )
set(SRC_LIST ${SRC_LIST} kcconnectionhandler.cpp )
set(SRC_LIST ${SRC_LIST} kccpphighlighter.cpp )
set(SRC_LIST ${SRC_LIST} kcpascalhighlighter.cpp )
set(SRC_LIST ${SRC_LIST} kcreplacewindow.cpp )
set(SRC_LIST ${SRC_LIST} kccolorconfigure.cpp )
set(SRC_LIST ${SRC_LIST} Controls/SettingItems/kcsettingcontrollineedit.cpp )
set(SRC_LIST ${SRC_LIST} kcdebugcommandio.cpp )
set(SRC_LIST ${SRC_LIST} kcdebugcontrolpanel.cpp )
set(SRC_LIST ${SRC_LIST} kcfloattoolbar.cpp )
set(SRC_LIST ${SRC_LIST} kcfontconfigure.cpp )
set(SRC_LIST ${SRC_LIST} kccodecompileprogress.cpp)

set(RESOURCE_LIST )
qt5_add_resources(RESOURCES_RCC rc.qrc)

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

if(WIN32)
    add_executable(${PROJECT_NAME} WIN32 ${SRC_LIST} ${RESOURCES_RCC})
else(WIN32)
    add_executable(${PROJECT_NAME} ${SRC_LIST} ${RESOURCES_RCC})
endif(WIN32)

# Use the Widgets module from Qt 5.
qt5_use_modules(${PROJECT_NAME} Widgets)

configure_file(default.style ${PROJECT_BINARY_DIR}/default.style COPYONLY)
configure_file(DefaultColorConfig.ini ${PROJECT_BINARY_DIR}/DefaultColorConfig.ini COPYONLY)

add_subdirectory(translations)
